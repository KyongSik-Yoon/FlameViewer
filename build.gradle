apply plugin: 'java'
apply plugin: 'application'

repositories {
    mavenCentral()
}

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url 'http://dl.bintray.com/jetbrains/intellij-plugin-service'
        }
        dependencies {
            classpath "me.champeau.gradle:jmh-gradle-plugin:0.3.1"
        }

    }
    dependencies {
        classpath "gradle.plugin.org.jetbrains:gradle-intellij-plugin:0.1.10"
    }
}

configurations {
    // configuration that holds jars to include in the jar
    agentLibs
}

dependencies {
    agentLibs "org.ow2.asm:asm:5.2"
    agentLibs "org.ow2.asm:asm-util:5.2" // TraceClassVisitor (for debugging)
    agentLibs group: 'org.ow2.asm', name: 'asm-commons', version: '5.0.3' // AdviceAdapter
    compile "com.google.protobuf:protobuf-java:3.3.1" // avoid error when generating proto sources
    agentLibs fileTree(dir: 'libs', include: ['protobuf-java-kornilova-l-3.3.0.jar'])
    configurations.compile.extendsFrom(configurations.agentLibs)
}

apply plugin: "me.champeau.gradle.jmh"
apply plugin: 'org.jetbrains.intellij'

mainClassName = 'com.github.kornilova_l.samples.Sample'

jar {
    from {
        configurations.agentLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes "Premain-Class": "com.github.kornilova_l.profiler.agent.Agent"
    }
    archiveName = 'javaagent.jar'
    includeEmptyDirs = false
}

task copyStatic(type: Copy) {
    from 'visualization'
    into System.getProperty("user.home") + '/.flamegraph-profiler/static'
}

task('prepareAndRunIde', dependsOn: [copyStatic, build]) {
    doLast {
        runIdea.execute()
    }
}

task profileClass(type: JavaExec, dependsOn: [jar]) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.github.kornilova_l.samples.Sample"
    jvmArgs += ["-javaagent:${jar.getArchivePath()}=agent-config/agent01.config"]
}

jmh {
    jar.execute()
    warmupIterations = 5
    iterations = 10
    fork = 2
    include = "test.*"
}
