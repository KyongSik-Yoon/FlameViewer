import io.netifi.flatbuffers.plugin.tasks.FlatBuffers

buildscript {
    ext.kotlin_version = '1.2.51'
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url 'http://dl.bintray.com/jetbrains/intellij-plugin-service'
        }
        maven {
            url 'https://repository-cdn.liferay.com/nexus/content/groups/public'
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "me.champeau.gradle:jmh-gradle-plugin:0.3.1"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.6'
        classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
        classpath 'com.liferay:com.liferay.gradle.plugins.soy:3.1.6'
    }
}

plugins {
    id 'org.jetbrains.intellij' version '0.1.10'
    id 'me.champeau.gradle.jmh' version '0.3.1'
    id 'com.google.protobuf' version '0.8.6' apply false
    id 'com.moowork.node' version '1.2.0'
    id 'com.liferay.soy' version '3.1.6'
    id "io.netifi.flatbuffers" version "1.0.4"
    id 'idea'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'
    group = 'com.gitgub.kornilova_l'
    version = '0.8.1-SNAPSHOT'
}

subprojects { subproject ->
    if (subproject.name == 'protobuf') {
        apply plugin: 'com.google.protobuf'
        apply plugin: 'idea'
    }
}

repositories {
    mavenCentral()
}

configurations {
    intellij.updateSinceUntilBuild = false
    intellij.downloadSources = false
    intellij.pluginName = "FlameViewer"
}

dependencies {
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.1'
    compile group: 'com.github.davidmoten', name: 'flatbuffers-java', version: '1.9.0.1'
    compile fileTree(dir: 'lib', include: ['com.jrockit.mc.flightrecorder_5.5.1.172852.jar'])
    compile fileTree(dir: 'lib', include: ['com.jrockit.mc.common_5.5.1.172852.jar'])
    compile fileTree(dir: 'lib', include: ['flight-recorder-parser-for-java-9.jar'])
    compile project('configuration')
    compile project('protobuf')
    testCompile project('agent')
    testCompile group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.11.0'
}

node {
    version = '10.6.0'
    npmVersion = '6.1.0'
    download = true
    nodeModulesDir = file('visualization')
}

def npmRun(String command) {
    return tasks.create(command, NpmTask) {
        args = ['run', command]
        dependsOn = [':protobuf:copyJSProto', npmInstall]
    }
}

task browserify(dependsOn: [npmRun('browserify-accumulative-trees'),
                            npmRun('browserify-trees-preview'),
                            npmRun('browserify-call-tree')]) {
}

browserify.dependsOn npmInstall

buildSoy {
    source 'visualization/static/tree-templates.soy'
}

task moveGeneratedTemplates(dependsOn: buildSoy) {
    doLast {
        file('visualization/static/tree-templates.soy.js').renameTo(file('visualization/static/js/generated/tree-templates.js'))
    }
}

task copyStatic(type: Copy, dependsOn: [browserify, moveGeneratedTemplates]) {
    from 'visualization/static'
    into 'build/classes/main/static'
    doLast {
        /* this is for running tests from IDEA interface */
        mkdir "out/test/classes/static"
    }
}

task copyAgent(type: Copy, dependsOn: [':agent:agentJar', ':agent:proxyJar']) {
    from 'agent/build/libs'
    into 'build/classes/main'
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

flatbuffers {
    flatcPath = '/usr/local/bin/flatc'
    language = 'java'
}

task compileFlatBuffers(type: FlatBuffers) {
    inputDir = file("src/main/flatbuffers")
    outputDir = file("src/gen/java")
}

task compilePlugin(dependsOn: [copyAgent, copyStatic, compileFlatBuffers]) {}

sourceSets.main.java.srcDir file('src/gen/java')
idea {
    module {
        generatedSourceDirs += file('src/gen/java')
    }
}

/* if have some problems with jmh - execute clean first */
jmh {
    /* jmh Jar warns about duplicate dependencies
     * currently I do not know how to fix it */
    zip64 = true
    duplicateClassesStrategy = DuplicatesStrategy.WARN
    include = 'benchmarks.CallTracesBenchmark'
}
