/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.profiler.Event');
goog.provide('proto.profiler.Event.Enter');
goog.provide('proto.profiler.Event.Exception');
goog.provide('proto.profiler.Event.Exit');
goog.provide('proto.profiler.Event.Var');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.profiler.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.profiler.Event.oneofGroups_);
};
goog.inherits(proto.profiler.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.profiler.Event.displayName = 'proto.profiler.Event';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.profiler.Event.oneofGroups_ = [[3,4,5]];

/**
 * @enum {number}
 */
proto.profiler.Event.InfoCase = {
  INFO_NOT_SET: 0,
  ENTER: 3,
  EXIT: 4,
  EXCEPTION: 5
};

/**
 * @return {proto.profiler.Event.InfoCase}
 */
proto.profiler.Event.prototype.getInfoCase = function() {
  return /** @type {proto.profiler.Event.InfoCase} */(jspb.Message.computeOneofCase(this, proto.profiler.Event.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.profiler.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.profiler.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.profiler.Event} msg The msg instance to transform.
 * @return {!Object}
 */
proto.profiler.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    threadid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    time: jspb.Message.getFieldWithDefault(msg, 2, 0),
    enter: (f = msg.getEnter()) && proto.profiler.Event.Enter.toObject(includeInstance, f),
    exit: (f = msg.getExit()) && proto.profiler.Event.Exit.toObject(includeInstance, f),
    exception: (f = msg.getException()) && proto.profiler.Event.Exception.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.profiler.Event}
 */
proto.profiler.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.profiler.Event;
  return proto.profiler.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.profiler.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.profiler.Event}
 */
proto.profiler.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setThreadid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 3:
      var value = new proto.profiler.Event.Enter;
      reader.readMessage(value,proto.profiler.Event.Enter.deserializeBinaryFromReader);
      msg.setEnter(value);
      break;
    case 4:
      var value = new proto.profiler.Event.Exit;
      reader.readMessage(value,proto.profiler.Event.Exit.deserializeBinaryFromReader);
      msg.setExit(value);
      break;
    case 5:
      var value = new proto.profiler.Event.Exception;
      reader.readMessage(value,proto.profiler.Event.Exception.deserializeBinaryFromReader);
      msg.setException(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.profiler.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.profiler.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.profiler.Event} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.profiler.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThreadid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getEnter();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.profiler.Event.Enter.serializeBinaryToWriter
    );
  }
  f = message.getExit();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.profiler.Event.Exit.serializeBinaryToWriter
    );
  }
  f = message.getException();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.profiler.Event.Exception.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.profiler.Event.Enter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.profiler.Event.Enter.repeatedFields_, null);
};
goog.inherits(proto.profiler.Event.Enter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.profiler.Event.Enter.displayName = 'proto.profiler.Event.Enter';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.profiler.Event.Enter.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.profiler.Event.Enter.prototype.toObject = function(opt_includeInstance) {
  return proto.profiler.Event.Enter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.profiler.Event.Enter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.profiler.Event.Enter.toObject = function(includeInstance, msg) {
  var f, obj = {
    classname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    methodname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    isstatic: jspb.Message.getFieldWithDefault(msg, 3, false),
    parametersList: jspb.Message.toObjectList(msg.getParametersList(),
    proto.profiler.Event.Var.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.profiler.Event.Enter}
 */
proto.profiler.Event.Enter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.profiler.Event.Enter;
  return proto.profiler.Event.Enter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.profiler.Event.Enter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.profiler.Event.Enter}
 */
proto.profiler.Event.Enter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethodname(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsstatic(value);
      break;
    case 4:
      var value = new proto.profiler.Event.Var;
      reader.readMessage(value,proto.profiler.Event.Var.deserializeBinaryFromReader);
      msg.addParameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.profiler.Event.Enter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.profiler.Event.Enter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.profiler.Event.Enter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.profiler.Event.Enter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClassname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMethodname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIsstatic();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getParametersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.profiler.Event.Var.serializeBinaryToWriter
    );
  }
};


/**
 * optional string className = 1;
 * @return {string}
 */
proto.profiler.Event.Enter.prototype.getClassname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.profiler.Event.Enter.prototype.setClassname = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string methodName = 2;
 * @return {string}
 */
proto.profiler.Event.Enter.prototype.getMethodname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.profiler.Event.Enter.prototype.setMethodname = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool isStatic = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.profiler.Event.Enter.prototype.getIsstatic = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.profiler.Event.Enter.prototype.setIsstatic = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated Var parameters = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.profiler.Event.Var>}
 */
proto.profiler.Event.Enter.prototype.getParametersList = function() {
  return /** @type{!Array.<!proto.profiler.Event.Var>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.profiler.Event.Var, 4));
};


/** @param {!Array.<!proto.profiler.Event.Var>} value */
proto.profiler.Event.Enter.prototype.setParametersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.profiler.Event.Var=} opt_value
 * @param {number=} opt_index
 * @return {!proto.profiler.Event.Var}
 */
proto.profiler.Event.Enter.prototype.addParameters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.profiler.Event.Var, opt_index);
};


proto.profiler.Event.Enter.prototype.clearParametersList = function() {
  this.setParametersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.profiler.Event.Exit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.profiler.Event.Exit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.profiler.Event.Exit.displayName = 'proto.profiler.Event.Exit';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.profiler.Event.Exit.prototype.toObject = function(opt_includeInstance) {
  return proto.profiler.Event.Exit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.profiler.Event.Exit} msg The msg instance to transform.
 * @return {!Object}
 */
proto.profiler.Event.Exit.toObject = function(includeInstance, msg) {
  var f, obj = {
    returnvalue: (f = msg.getReturnvalue()) && proto.profiler.Event.Var.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.profiler.Event.Exit}
 */
proto.profiler.Event.Exit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.profiler.Event.Exit;
  return proto.profiler.Event.Exit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.profiler.Event.Exit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.profiler.Event.Exit}
 */
proto.profiler.Event.Exit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.profiler.Event.Var;
      reader.readMessage(value,proto.profiler.Event.Var.deserializeBinaryFromReader);
      msg.setReturnvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.profiler.Event.Exit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.profiler.Event.Exit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.profiler.Event.Exit} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.profiler.Event.Exit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReturnvalue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.profiler.Event.Var.serializeBinaryToWriter
    );
  }
};


/**
 * optional Var returnValue = 1;
 * @return {?proto.profiler.Event.Var}
 */
proto.profiler.Event.Exit.prototype.getReturnvalue = function() {
  return /** @type{?proto.profiler.Event.Var} */ (
    jspb.Message.getWrapperField(this, proto.profiler.Event.Var, 1));
};


/** @param {?proto.profiler.Event.Var|undefined} value */
proto.profiler.Event.Exit.prototype.setReturnvalue = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.profiler.Event.Exit.prototype.clearReturnvalue = function() {
  this.setReturnvalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.profiler.Event.Exit.prototype.hasReturnvalue = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.profiler.Event.Exception = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.profiler.Event.Exception, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.profiler.Event.Exception.displayName = 'proto.profiler.Event.Exception';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.profiler.Event.Exception.prototype.toObject = function(opt_includeInstance) {
  return proto.profiler.Event.Exception.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.profiler.Event.Exception} msg The msg instance to transform.
 * @return {!Object}
 */
proto.profiler.Event.Exception.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.profiler.Event.Exception}
 */
proto.profiler.Event.Exception.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.profiler.Event.Exception;
  return proto.profiler.Event.Exception.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.profiler.Event.Exception} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.profiler.Event.Exception}
 */
proto.profiler.Event.Exception.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.profiler.Event.Exception.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.profiler.Event.Exception.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.profiler.Event.Exception} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.profiler.Event.Exception.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.profiler.Event.Exception.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.profiler.Event.Exception.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.profiler.Event.Exception.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.profiler.Event.Exception.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.profiler.Event.Var = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.profiler.Event.Var.oneofGroups_);
};
goog.inherits(proto.profiler.Event.Var, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.profiler.Event.Var.displayName = 'proto.profiler.Event.Var';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.profiler.Event.Var.oneofGroups_ = [[1,2,3,4,5,6,7,8,9]];

/**
 * @enum {number}
 */
proto.profiler.Event.Var.ValueCase = {
  VALUE_NOT_SET: 0,
  I: 1,
  J: 2,
  Z: 3,
  C: 4,
  S: 5,
  B: 6,
  F: 7,
  D: 8,
  A: 9
};

/**
 * @return {proto.profiler.Event.Var.ValueCase}
 */
proto.profiler.Event.Var.prototype.getValueCase = function() {
  return /** @type {proto.profiler.Event.Var.ValueCase} */(jspb.Message.computeOneofCase(this, proto.profiler.Event.Var.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.profiler.Event.Var.prototype.toObject = function(opt_includeInstance) {
  return proto.profiler.Event.Var.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.profiler.Event.Var} msg The msg instance to transform.
 * @return {!Object}
 */
proto.profiler.Event.Var.toObject = function(includeInstance, msg) {
  var f, obj = {
    i: jspb.Message.getFieldWithDefault(msg, 1, 0),
    j: jspb.Message.getFieldWithDefault(msg, 2, 0),
    z: jspb.Message.getFieldWithDefault(msg, 3, false),
    c: jspb.Message.getFieldWithDefault(msg, 4, 0),
    s: jspb.Message.getFieldWithDefault(msg, 5, 0),
    b: jspb.Message.getFieldWithDefault(msg, 6, 0),
    f: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    d: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    a: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.profiler.Event.Var}
 */
proto.profiler.Event.Var.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.profiler.Event.Var;
  return proto.profiler.Event.Var.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.profiler.Event.Var} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.profiler.Event.Var}
 */
proto.profiler.Event.Var.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setI(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setJ(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setZ(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setC(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setS(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setB(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setF(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setD(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setA(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.profiler.Event.Var.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.profiler.Event.Var.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.profiler.Event.Var} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.profiler.Event.Var.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeSint64(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeSint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional sint32 I = 1;
 * @return {number}
 */
proto.profiler.Event.Var.prototype.getI = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.profiler.Event.Var.prototype.setI = function(value) {
  jspb.Message.setOneofField(this, 1, proto.profiler.Event.Var.oneofGroups_[0], value);
};


proto.profiler.Event.Var.prototype.clearI = function() {
  jspb.Message.setOneofField(this, 1, proto.profiler.Event.Var.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.profiler.Event.Var.prototype.hasI = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional sint64 J = 2;
 * @return {number}
 */
proto.profiler.Event.Var.prototype.getJ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.profiler.Event.Var.prototype.setJ = function(value) {
  jspb.Message.setOneofField(this, 2, proto.profiler.Event.Var.oneofGroups_[0], value);
};


proto.profiler.Event.Var.prototype.clearJ = function() {
  jspb.Message.setOneofField(this, 2, proto.profiler.Event.Var.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.profiler.Event.Var.prototype.hasJ = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool Z = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.profiler.Event.Var.prototype.getZ = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.profiler.Event.Var.prototype.setZ = function(value) {
  jspb.Message.setOneofField(this, 3, proto.profiler.Event.Var.oneofGroups_[0], value);
};


proto.profiler.Event.Var.prototype.clearZ = function() {
  jspb.Message.setOneofField(this, 3, proto.profiler.Event.Var.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.profiler.Event.Var.prototype.hasZ = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 C = 4;
 * @return {number}
 */
proto.profiler.Event.Var.prototype.getC = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.profiler.Event.Var.prototype.setC = function(value) {
  jspb.Message.setOneofField(this, 4, proto.profiler.Event.Var.oneofGroups_[0], value);
};


proto.profiler.Event.Var.prototype.clearC = function() {
  jspb.Message.setOneofField(this, 4, proto.profiler.Event.Var.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.profiler.Event.Var.prototype.hasC = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional sint32 S = 5;
 * @return {number}
 */
proto.profiler.Event.Var.prototype.getS = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.profiler.Event.Var.prototype.setS = function(value) {
  jspb.Message.setOneofField(this, 5, proto.profiler.Event.Var.oneofGroups_[0], value);
};


proto.profiler.Event.Var.prototype.clearS = function() {
  jspb.Message.setOneofField(this, 5, proto.profiler.Event.Var.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.profiler.Event.Var.prototype.hasS = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional sint32 B = 6;
 * @return {number}
 */
proto.profiler.Event.Var.prototype.getB = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.profiler.Event.Var.prototype.setB = function(value) {
  jspb.Message.setOneofField(this, 6, proto.profiler.Event.Var.oneofGroups_[0], value);
};


proto.profiler.Event.Var.prototype.clearB = function() {
  jspb.Message.setOneofField(this, 6, proto.profiler.Event.Var.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.profiler.Event.Var.prototype.hasB = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float F = 7;
 * @return {number}
 */
proto.profiler.Event.Var.prototype.getF = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.profiler.Event.Var.prototype.setF = function(value) {
  jspb.Message.setOneofField(this, 7, proto.profiler.Event.Var.oneofGroups_[0], value);
};


proto.profiler.Event.Var.prototype.clearF = function() {
  jspb.Message.setOneofField(this, 7, proto.profiler.Event.Var.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.profiler.Event.Var.prototype.hasF = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double D = 8;
 * @return {number}
 */
proto.profiler.Event.Var.prototype.getD = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.profiler.Event.Var.prototype.setD = function(value) {
  jspb.Message.setOneofField(this, 8, proto.profiler.Event.Var.oneofGroups_[0], value);
};


proto.profiler.Event.Var.prototype.clearD = function() {
  jspb.Message.setOneofField(this, 8, proto.profiler.Event.Var.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.profiler.Event.Var.prototype.hasD = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string A = 9;
 * @return {string}
 */
proto.profiler.Event.Var.prototype.getA = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.profiler.Event.Var.prototype.setA = function(value) {
  jspb.Message.setOneofField(this, 9, proto.profiler.Event.Var.oneofGroups_[0], value);
};


proto.profiler.Event.Var.prototype.clearA = function() {
  jspb.Message.setOneofField(this, 9, proto.profiler.Event.Var.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.profiler.Event.Var.prototype.hasA = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int64 threadId = 1;
 * @return {number}
 */
proto.profiler.Event.prototype.getThreadid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.profiler.Event.prototype.setThreadid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 time = 2;
 * @return {number}
 */
proto.profiler.Event.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.profiler.Event.prototype.setTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Enter enter = 3;
 * @return {?proto.profiler.Event.Enter}
 */
proto.profiler.Event.prototype.getEnter = function() {
  return /** @type{?proto.profiler.Event.Enter} */ (
    jspb.Message.getWrapperField(this, proto.profiler.Event.Enter, 3));
};


/** @param {?proto.profiler.Event.Enter|undefined} value */
proto.profiler.Event.prototype.setEnter = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.profiler.Event.oneofGroups_[0], value);
};


proto.profiler.Event.prototype.clearEnter = function() {
  this.setEnter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.profiler.Event.prototype.hasEnter = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Exit exit = 4;
 * @return {?proto.profiler.Event.Exit}
 */
proto.profiler.Event.prototype.getExit = function() {
  return /** @type{?proto.profiler.Event.Exit} */ (
    jspb.Message.getWrapperField(this, proto.profiler.Event.Exit, 4));
};


/** @param {?proto.profiler.Event.Exit|undefined} value */
proto.profiler.Event.prototype.setExit = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.profiler.Event.oneofGroups_[0], value);
};


proto.profiler.Event.prototype.clearExit = function() {
  this.setExit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.profiler.Event.prototype.hasExit = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Exception exception = 5;
 * @return {?proto.profiler.Event.Exception}
 */
proto.profiler.Event.prototype.getException = function() {
  return /** @type{?proto.profiler.Event.Exception} */ (
    jspb.Message.getWrapperField(this, proto.profiler.Event.Exception, 5));
};


/** @param {?proto.profiler.Event.Exception|undefined} value */
proto.profiler.Event.prototype.setException = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.profiler.Event.oneofGroups_[0], value);
};


proto.profiler.Event.prototype.clearException = function() {
  this.setException(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.profiler.Event.prototype.hasException = function() {
  return jspb.Message.getField(this, 5) != null;
};


