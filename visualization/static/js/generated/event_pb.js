/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.com.github.kornilova_l.flamegraph.proto.Event', null, global);
goog.exportSymbol('proto.com.github.kornilova_l.flamegraph.proto.Event.Map', null, global);
goog.exportSymbol('proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent', null, global);
goog.exportSymbol('proto.com.github.kornilova_l.flamegraph.proto.Var', null, global);
goog.exportSymbol('proto.com.github.kornilova_l.flamegraph.proto.Var.Object', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.github.kornilova_l.flamegraph.proto.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.com.github.kornilova_l.flamegraph.proto.Event.oneofGroups_);
};
goog.inherits(proto.com.github.kornilova_l.flamegraph.proto.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.github.kornilova_l.flamegraph.proto.Event.displayName = 'proto.com.github.kornilova_l.flamegraph.proto.Event';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.TypeCase = {
  TYPE_NOT_SET: 0,
  METHODEVENT: 1,
  NEWCLASS: 2,
  NEWTHREAD: 3
};

/**
 * @return {proto.com.github.kornilova_l.flamegraph.proto.Event.TypeCase}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.prototype.getTypeCase = function() {
  return /** @type {proto.com.github.kornilova_l.flamegraph.proto.Event.TypeCase} */(jspb.Message.computeOneofCase(this, proto.com.github.kornilova_l.flamegraph.proto.Event.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.com.github.kornilova_l.flamegraph.proto.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.github.kornilova_l.flamegraph.proto.Event} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    methodevent: (f = msg.getMethodevent()) && proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.toObject(includeInstance, f),
    newclass: (f = msg.getNewclass()) && proto.com.github.kornilova_l.flamegraph.proto.Event.Map.toObject(includeInstance, f),
    newthread: (f = msg.getNewthread()) && proto.com.github.kornilova_l.flamegraph.proto.Event.Map.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.github.kornilova_l.flamegraph.proto.Event}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.github.kornilova_l.flamegraph.proto.Event;
  return proto.com.github.kornilova_l.flamegraph.proto.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.github.kornilova_l.flamegraph.proto.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.github.kornilova_l.flamegraph.proto.Event}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent;
      reader.readMessage(value,proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.deserializeBinaryFromReader);
      msg.setMethodevent(value);
      break;
    case 2:
      var value = new proto.com.github.kornilova_l.flamegraph.proto.Event.Map;
      reader.readMessage(value,proto.com.github.kornilova_l.flamegraph.proto.Event.Map.deserializeBinaryFromReader);
      msg.setNewclass(value);
      break;
    case 3:
      var value = new proto.com.github.kornilova_l.flamegraph.proto.Event.Map;
      reader.readMessage(value,proto.com.github.kornilova_l.flamegraph.proto.Event.Map.deserializeBinaryFromReader);
      msg.setNewthread(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.github.kornilova_l.flamegraph.proto.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.github.kornilova_l.flamegraph.proto.Event} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethodevent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.serializeBinaryToWriter
    );
  }
  f = message.getNewclass();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.github.kornilova_l.flamegraph.proto.Event.Map.serializeBinaryToWriter
    );
  }
  f = message.getNewthread();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.com.github.kornilova_l.flamegraph.proto.Event.Map.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.repeatedFields_, proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.oneofGroups_);
};
goog.inherits(proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.displayName = 'proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.repeatedFields_ = [8];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.oneofGroups_ = [[9, 10]];

/**
 * @enum {number}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.EndCase = {
    END_NOT_SET: 0,
    RETURN_VALUE: 9,
    THROWABLE: 10
};

/**
 * @return {proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.EndCase}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.prototype.getEndCase = function () {
    return /** @type {proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.EndCase} */(jspb.Message.computeOneofCase(this, proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    threadId: jspb.Message.getFieldWithDefault(msg, 1, 0),
      classNameId: jspb.Message.getFieldWithDefault(msg, 2, 0),
      startTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
      duration: jspb.Message.getFieldWithDefault(msg, 4, 0),
      methodName: jspb.Message.getFieldWithDefault(msg, 5, ""),
      desc: jspb.Message.getFieldWithDefault(msg, 6, ""),
      isStatic: jspb.Message.getFieldWithDefault(msg, 7, false),
      parametersList: jspb.Message.toObjectList(msg.getParametersList(),
          proto.com.github.kornilova_l.flamegraph.proto.Var.toObject, includeInstance),
      returnValue: (f = msg.getReturnValue()) && proto.com.github.kornilova_l.flamegraph.proto.Var.toObject(includeInstance, f),
      throwable: (f = msg.getThrowable()) && proto.com.github.kornilova_l.flamegraph.proto.Var.Object.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent;
  return proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setThreadId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
        msg.setClassNameId(value);
      break;
    case 3:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setStartTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
        msg.setDuration(value);
      break;
        case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethodName(value);
      break;
        case 6:
            var value = /** @type {string} */ (reader.readString());
            msg.setDesc(value);
            break;
        case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsStatic(value);
      break;
        case 8:
      var value = new proto.com.github.kornilova_l.flamegraph.proto.Var;
      reader.readMessage(value,proto.com.github.kornilova_l.flamegraph.proto.Var.deserializeBinaryFromReader);
      msg.addParameters(value);
      break;
        case 9:
            var value = new proto.com.github.kornilova_l.flamegraph.proto.Var;
            reader.readMessage(value, proto.com.github.kornilova_l.flamegraph.proto.Var.deserializeBinaryFromReader);
            msg.setReturnValue(value);
            break;
        case 10:
            var value = new proto.com.github.kornilova_l.flamegraph.proto.Var.Object;
            reader.readMessage(value, proto.com.github.kornilova_l.flamegraph.proto.Var.Object.deserializeBinaryFromReader);
            msg.setThrowable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
    proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
    f = message.getThreadId();
    if (f !== 0) {
        writer.writeInt64(
            1,
            f
        );
    }
  f = message.getClassNameId();
  if (f !== 0) {
    writer.writeInt64(
        2,
        f
    );
  }
    f = message.getStartTime();
    if (f !== 0) {
        writer.writeInt64(
            3,
            f
        );
    }
    f = message.getDuration();
    if (f !== 0) {
        writer.writeInt64(
            4,
      f
    );
  }
  f = message.getMethodName();
  if (f.length > 0) {
    writer.writeString(
        5,
        f
    );
  }
    f = message.getDesc();
    if (f.length > 0) {
        writer.writeString(
            6,
      f
    );
  }
  f = message.getIsStatic();
  if (f) {
    writer.writeBool(
        7,
      f
    );
  }
  f = message.getParametersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
        8,
      f,
      proto.com.github.kornilova_l.flamegraph.proto.Var.serializeBinaryToWriter
    );
  }
    f = message.getReturnValue();
    if (f != null) {
        writer.writeMessage(
            9,
            f,
            proto.com.github.kornilova_l.flamegraph.proto.Var.serializeBinaryToWriter
        );
    }
    f = message.getThrowable();
    if (f != null) {
        writer.writeMessage(
            10,
            f,
            proto.com.github.kornilova_l.flamegraph.proto.Var.Object.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 thread_id = 1;
 * @return {number}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.prototype.getThreadId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.prototype.setThreadId = function (value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 class_name_id = 2;
 * @return {number}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.prototype.getClassNameId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.prototype.setClassNameId = function (value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 start_time = 3;
 * @return {number}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.prototype.getStartTime = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.prototype.setStartTime = function (value) {
    jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 duration = 4;
 * @return {number}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.prototype.getDuration = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.prototype.setDuration = function (value) {
    jspb.Message.setField(this, 4, value);
};


/**
 * optional string method_name = 5;
 * @return {string}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.prototype.getMethodName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.prototype.setMethodName = function (value) {
    jspb.Message.setField(this, 5, value);
};


/**
 * optional string desc = 6;
 * @return {string}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.prototype.getDesc = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.prototype.setDesc = function (value) {
    jspb.Message.setField(this, 6, value);
};


/**
 * optional bool is_static = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.prototype.getIsStatic = function () {
    return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.prototype.setIsStatic = function (value) {
    jspb.Message.setField(this, 7, value);
};


/**
 * repeated Var parameters = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.com.github.kornilova_l.flamegraph.proto.Var>}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.prototype.getParametersList = function () {
  return /** @type{!Array.<!proto.com.github.kornilova_l.flamegraph.proto.Var>} */ (
      jspb.Message.getRepeatedWrapperField(this, proto.com.github.kornilova_l.flamegraph.proto.Var, 8));
};


/** @param {!Array.<!proto.com.github.kornilova_l.flamegraph.proto.Var>} value */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.prototype.setParametersList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.com.github.kornilova_l.flamegraph.proto.Var=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.github.kornilova_l.flamegraph.proto.Var}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.prototype.addParameters = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.com.github.kornilova_l.flamegraph.proto.Var, opt_index);
};


proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.prototype.clearParametersList = function () {
  this.setParametersList([]);
};


/**
 * optional Var return_value = 9;
 * @return {?proto.com.github.kornilova_l.flamegraph.proto.Var}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.prototype.getReturnValue = function () {
  return /** @type{?proto.com.github.kornilova_l.flamegraph.proto.Var} */ (
      jspb.Message.getWrapperField(this, proto.com.github.kornilova_l.flamegraph.proto.Var, 9));
};


/** @param {?proto.com.github.kornilova_l.flamegraph.proto.Var|undefined} value */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.prototype.setReturnValue = function (value) {
    jspb.Message.setOneofWrapperField(this, 9, proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.oneofGroups_[0], value);
};


proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.prototype.clearReturnValue = function () {
  this.setReturnValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.prototype.hasReturnValue = function () {
    return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Var.Object throwable = 10;
 * @return {?proto.com.github.kornilova_l.flamegraph.proto.Var.Object}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.prototype.getThrowable = function () {
  return /** @type{?proto.com.github.kornilova_l.flamegraph.proto.Var.Object} */ (
      jspb.Message.getWrapperField(this, proto.com.github.kornilova_l.flamegraph.proto.Var.Object, 10));
};


/** @param {?proto.com.github.kornilova_l.flamegraph.proto.Var.Object|undefined} value */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.prototype.setThrowable = function (value) {
    jspb.Message.setOneofWrapperField(this, 10, proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.oneofGroups_[0], value);
};


proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.prototype.clearThrowable = function () {
    this.setThrowable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent.prototype.hasThrowable = function () {
    return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.Map = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.github.kornilova_l.flamegraph.proto.Event.Map, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.github.kornilova_l.flamegraph.proto.Event.Map.displayName = 'proto.com.github.kornilova_l.flamegraph.proto.Event.Map';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.Map.prototype.toObject = function(opt_includeInstance) {
  return proto.com.github.kornilova_l.flamegraph.proto.Event.Map.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.github.kornilova_l.flamegraph.proto.Event.Map} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.Map.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.github.kornilova_l.flamegraph.proto.Event.Map}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.Map.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.github.kornilova_l.flamegraph.proto.Event.Map;
  return proto.com.github.kornilova_l.flamegraph.proto.Event.Map.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.github.kornilova_l.flamegraph.proto.Event.Map} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.github.kornilova_l.flamegraph.proto.Event.Map}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.Map.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.Map.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.github.kornilova_l.flamegraph.proto.Event.Map.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.github.kornilova_l.flamegraph.proto.Event.Map} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.Map.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.Map.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.github.kornilova_l.flamegraph.proto.Event.Map.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.Map.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.github.kornilova_l.flamegraph.proto.Event.Map.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional MethodEvent methodEvent = 1;
 * @return {?proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.prototype.getMethodevent = function() {
  return /** @type{?proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent} */ (
    jspb.Message.getWrapperField(this, proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent, 1));
};


/** @param {?proto.com.github.kornilova_l.flamegraph.proto.Event.MethodEvent|undefined} value */
proto.com.github.kornilova_l.flamegraph.proto.Event.prototype.setMethodevent = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.com.github.kornilova_l.flamegraph.proto.Event.oneofGroups_[0], value);
};


proto.com.github.kornilova_l.flamegraph.proto.Event.prototype.clearMethodevent = function() {
  this.setMethodevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.prototype.hasMethodevent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Map newClass = 2;
 * @return {?proto.com.github.kornilova_l.flamegraph.proto.Event.Map}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.prototype.getNewclass = function() {
  return /** @type{?proto.com.github.kornilova_l.flamegraph.proto.Event.Map} */ (
    jspb.Message.getWrapperField(this, proto.com.github.kornilova_l.flamegraph.proto.Event.Map, 2));
};


/** @param {?proto.com.github.kornilova_l.flamegraph.proto.Event.Map|undefined} value */
proto.com.github.kornilova_l.flamegraph.proto.Event.prototype.setNewclass = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.com.github.kornilova_l.flamegraph.proto.Event.oneofGroups_[0], value);
};


proto.com.github.kornilova_l.flamegraph.proto.Event.prototype.clearNewclass = function() {
  this.setNewclass(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.prototype.hasNewclass = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Map newThread = 3;
 * @return {?proto.com.github.kornilova_l.flamegraph.proto.Event.Map}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.prototype.getNewthread = function() {
  return /** @type{?proto.com.github.kornilova_l.flamegraph.proto.Event.Map} */ (
    jspb.Message.getWrapperField(this, proto.com.github.kornilova_l.flamegraph.proto.Event.Map, 3));
};


/** @param {?proto.com.github.kornilova_l.flamegraph.proto.Event.Map|undefined} value */
proto.com.github.kornilova_l.flamegraph.proto.Event.prototype.setNewthread = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.com.github.kornilova_l.flamegraph.proto.Event.oneofGroups_[0], value);
};


proto.com.github.kornilova_l.flamegraph.proto.Event.prototype.clearNewthread = function() {
  this.setNewthread(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.github.kornilova_l.flamegraph.proto.Event.prototype.hasNewthread = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.github.kornilova_l.flamegraph.proto.Var = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.com.github.kornilova_l.flamegraph.proto.Var.oneofGroups_);
};
goog.inherits(proto.com.github.kornilova_l.flamegraph.proto.Var, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.github.kornilova_l.flamegraph.proto.Var.displayName = 'proto.com.github.kornilova_l.flamegraph.proto.Var';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.oneofGroups_ = [[1,2,3,4,5,6,7,8,9]];

/**
 * @enum {number}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.ValueCase = {
  VALUE_NOT_SET: 0,
  I: 1,
  J: 2,
  Z: 3,
  C: 4,
  S: 5,
  B: 6,
  F: 7,
  D: 8,
  OBJECT: 9
};

/**
 * @return {proto.com.github.kornilova_l.flamegraph.proto.Var.ValueCase}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.getValueCase = function() {
  return /** @type {proto.com.github.kornilova_l.flamegraph.proto.Var.ValueCase} */(jspb.Message.computeOneofCase(this, proto.com.github.kornilova_l.flamegraph.proto.Var.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.toObject = function(opt_includeInstance) {
  return proto.com.github.kornilova_l.flamegraph.proto.Var.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.github.kornilova_l.flamegraph.proto.Var} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.toObject = function(includeInstance, msg) {
  var f, obj = {
    i: jspb.Message.getFieldWithDefault(msg, 1, 0),
    j: jspb.Message.getFieldWithDefault(msg, 2, 0),
    z: jspb.Message.getFieldWithDefault(msg, 3, false),
    c: jspb.Message.getFieldWithDefault(msg, 4, 0),
    s: jspb.Message.getFieldWithDefault(msg, 5, 0),
    b: jspb.Message.getFieldWithDefault(msg, 6, 0),
    f: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    d: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    object: (f = msg.getObject()) && proto.com.github.kornilova_l.flamegraph.proto.Var.Object.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.github.kornilova_l.flamegraph.proto.Var}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.github.kornilova_l.flamegraph.proto.Var;
  return proto.com.github.kornilova_l.flamegraph.proto.Var.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.github.kornilova_l.flamegraph.proto.Var} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.github.kornilova_l.flamegraph.proto.Var}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setI(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setJ(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setZ(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setC(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setS(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setB(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setF(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setD(value);
      break;
    case 9:
      var value = new proto.com.github.kornilova_l.flamegraph.proto.Var.Object;
      reader.readMessage(value,proto.com.github.kornilova_l.flamegraph.proto.Var.Object.deserializeBinaryFromReader);
      msg.setObject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.github.kornilova_l.flamegraph.proto.Var.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.github.kornilova_l.flamegraph.proto.Var} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeSint64(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeSint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getObject();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.com.github.kornilova_l.flamegraph.proto.Var.Object.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.Object = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.github.kornilova_l.flamegraph.proto.Var.Object, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.github.kornilova_l.flamegraph.proto.Var.Object.displayName = 'proto.com.github.kornilova_l.flamegraph.proto.Var.Object';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.Object.prototype.toObject = function(opt_includeInstance) {
  return proto.com.github.kornilova_l.flamegraph.proto.Var.Object.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.github.kornilova_l.flamegraph.proto.Var.Object} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.Object.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.github.kornilova_l.flamegraph.proto.Var.Object}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.Object.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.github.kornilova_l.flamegraph.proto.Var.Object;
  return proto.com.github.kornilova_l.flamegraph.proto.Var.Object.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.github.kornilova_l.flamegraph.proto.Var.Object} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.github.kornilova_l.flamegraph.proto.Var.Object}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.Object.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.Object.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.github.kornilova_l.flamegraph.proto.Var.Object.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.github.kornilova_l.flamegraph.proto.Var.Object} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.Object.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.Object.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.github.kornilova_l.flamegraph.proto.Var.Object.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.Object.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.github.kornilova_l.flamegraph.proto.Var.Object.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional sint32 I = 1;
 * @return {number}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.getI = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.setI = function(value) {
  jspb.Message.setOneofField(this, 1, proto.com.github.kornilova_l.flamegraph.proto.Var.oneofGroups_[0], value);
};


proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.clearI = function() {
  jspb.Message.setOneofField(this, 1, proto.com.github.kornilova_l.flamegraph.proto.Var.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.hasI = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional sint64 J = 2;
 * @return {number}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.getJ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.setJ = function(value) {
  jspb.Message.setOneofField(this, 2, proto.com.github.kornilova_l.flamegraph.proto.Var.oneofGroups_[0], value);
};


proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.clearJ = function() {
  jspb.Message.setOneofField(this, 2, proto.com.github.kornilova_l.flamegraph.proto.Var.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.hasJ = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool Z = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.getZ = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.setZ = function(value) {
  jspb.Message.setOneofField(this, 3, proto.com.github.kornilova_l.flamegraph.proto.Var.oneofGroups_[0], value);
};


proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.clearZ = function() {
  jspb.Message.setOneofField(this, 3, proto.com.github.kornilova_l.flamegraph.proto.Var.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.hasZ = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 C = 4;
 * @return {number}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.getC = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.setC = function(value) {
  jspb.Message.setOneofField(this, 4, proto.com.github.kornilova_l.flamegraph.proto.Var.oneofGroups_[0], value);
};


proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.clearC = function() {
  jspb.Message.setOneofField(this, 4, proto.com.github.kornilova_l.flamegraph.proto.Var.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.hasC = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional sint32 S = 5;
 * @return {number}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.getS = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.setS = function(value) {
  jspb.Message.setOneofField(this, 5, proto.com.github.kornilova_l.flamegraph.proto.Var.oneofGroups_[0], value);
};


proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.clearS = function() {
  jspb.Message.setOneofField(this, 5, proto.com.github.kornilova_l.flamegraph.proto.Var.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.hasS = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional sint32 B = 6;
 * @return {number}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.getB = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.setB = function(value) {
  jspb.Message.setOneofField(this, 6, proto.com.github.kornilova_l.flamegraph.proto.Var.oneofGroups_[0], value);
};


proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.clearB = function() {
  jspb.Message.setOneofField(this, 6, proto.com.github.kornilova_l.flamegraph.proto.Var.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.hasB = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float F = 7;
 * @return {number}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.getF = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.setF = function(value) {
  jspb.Message.setOneofField(this, 7, proto.com.github.kornilova_l.flamegraph.proto.Var.oneofGroups_[0], value);
};


proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.clearF = function() {
  jspb.Message.setOneofField(this, 7, proto.com.github.kornilova_l.flamegraph.proto.Var.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.hasF = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double D = 8;
 * @return {number}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.getD = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.setD = function(value) {
  jspb.Message.setOneofField(this, 8, proto.com.github.kornilova_l.flamegraph.proto.Var.oneofGroups_[0], value);
};


proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.clearD = function() {
  jspb.Message.setOneofField(this, 8, proto.com.github.kornilova_l.flamegraph.proto.Var.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.hasD = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Object object = 9;
 * @return {?proto.com.github.kornilova_l.flamegraph.proto.Var.Object}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.getObject = function() {
  return /** @type{?proto.com.github.kornilova_l.flamegraph.proto.Var.Object} */ (
    jspb.Message.getWrapperField(this, proto.com.github.kornilova_l.flamegraph.proto.Var.Object, 9));
};


/** @param {?proto.com.github.kornilova_l.flamegraph.proto.Var.Object|undefined} value */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.setObject = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.com.github.kornilova_l.flamegraph.proto.Var.oneofGroups_[0], value);
};


proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.clearObject = function() {
  this.setObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.github.kornilova_l.flamegraph.proto.Var.prototype.hasObject = function() {
  return jspb.Message.getField(this, 9) != null;
};


goog.object.extend(exports, proto.com.github.kornilova_l.flamegraph.proto);
