// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/github/kornilova_l/flamegraph/proto/tree_preview.proto

package com.github.kornilova_l.flamegraph.proto;

public final class TreePreviewProtos {
    private TreePreviewProtos() {
    }

    public static void registerAllExtensions(
            com.github.kornilova_l.libs.com.google.protobuf.ExtensionRegistryLite registry) {
    }

    public static void registerAllExtensions(
            com.github.kornilova_l.libs.com.google.protobuf.ExtensionRegistry registry) {
        registerAllExtensions(
                (com.github.kornilova_l.libs.com.google.protobuf.ExtensionRegistryLite) registry);
    }

    public interface TreePreviewOrBuilder extends
            // @@protoc_insertion_point(interface_extends:com.github.kornilova_l.flamegraph.proto.TreePreview)
            com.github.kornilova_l.libs.com.google.protobuf.MessageOrBuilder {

        /**
         * <code>.com.github.kornilova_l.flamegraph.proto.Tree.TreeInfo tree_info = 1;</code>
         */
        boolean hasTreeInfo();

        /**
         * <code>.com.github.kornilova_l.flamegraph.proto.Tree.TreeInfo tree_info = 1;</code>
         */
        com.github.kornilova_l.flamegraph.proto.TreeProtos.Tree.TreeInfo getTreeInfo();

        /**
         * <code>.com.github.kornilova_l.flamegraph.proto.Tree.TreeInfo tree_info = 1;</code>
         */
        com.github.kornilova_l.flamegraph.proto.TreeProtos.Tree.TreeInfoOrBuilder getTreeInfoOrBuilder();

        /**
         * <code>uint32 depth = 2;</code>
         */
        int getDepth();

        /**
         * <code>int64 width = 3;</code>
         */
        long getWidth();

        /**
         * <code>repeated .com.github.kornilova_l.flamegraph.proto.TreePreview.Vector vectors = 4;</code>
         */
        java.util.List<com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector>
        getVectorsList();

        /**
         * <code>repeated .com.github.kornilova_l.flamegraph.proto.TreePreview.Vector vectors = 4;</code>
         */
        com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector getVectors(int index);

        /**
         * <code>repeated .com.github.kornilova_l.flamegraph.proto.TreePreview.Vector vectors = 4;</code>
         */
        int getVectorsCount();

        /**
         * <code>repeated .com.github.kornilova_l.flamegraph.proto.TreePreview.Vector vectors = 4;</code>
         */
        java.util.List<? extends com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.VectorOrBuilder>
        getVectorsOrBuilderList();

        /**
         * <code>repeated .com.github.kornilova_l.flamegraph.proto.TreePreview.Vector vectors = 4;</code>
         */
        com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.VectorOrBuilder getVectorsOrBuilder(
                int index);
    }

    /**
     * Protobuf type {@code com.github.kornilova_l.flamegraph.proto.TreePreview}
     */
    public static final class TreePreview extends
            com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:com.github.kornilova_l.flamegraph.proto.TreePreview)
            TreePreviewOrBuilder {
        // Use TreePreview.newBuilder() to construct.
        private TreePreview(com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private TreePreview() {
            depth_ = 0;
            width_ = 0L;
            vectors_ = java.util.Collections.emptyList();
        }

        @java.lang.Override
        public final com.github.kornilova_l.libs.com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.github.kornilova_l.libs.com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private TreePreview(
                com.github.kornilova_l.libs.com.google.protobuf.CodedInputStream input,
                com.github.kornilova_l.libs.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.github.kornilova_l.libs.com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            com.github.kornilova_l.flamegraph.proto.TreeProtos.Tree.TreeInfo.Builder subBuilder = null;
                            if (treeInfo_ != null) {
                                subBuilder = treeInfo_.toBuilder();
                            }
                            treeInfo_ = input.readMessage(com.github.kornilova_l.flamegraph.proto.TreeProtos.Tree.TreeInfo.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(treeInfo_);
                                treeInfo_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                        case 16: {

                            depth_ = input.readUInt32();
                            break;
                        }
                        case 24: {

                            width_ = input.readInt64();
                            break;
                        }
                        case 34: {
                            if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                                vectors_ = new java.util.ArrayList<com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector>();
                                mutable_bitField0_ |= 0x00000008;
                            }
                            vectors_.add(
                                    input.readMessage(com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector.parser(), extensionRegistry));
                            break;
                        }
                    }
                }
            } catch (com.github.kornilova_l.libs.com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.github.kornilova_l.libs.com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                    vectors_ = java.util.Collections.unmodifiableList(vectors_);
                }
                makeExtensionsImmutable();
            }
        }

        public static final com.github.kornilova_l.libs.com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.internal_static_com_github_kornilova_l_flamegraph_proto_TreePreview_descriptor;
        }

        protected com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.internal_static_com_github_kornilova_l_flamegraph_proto_TreePreview_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.class, com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Builder.class);
        }

        public interface VectorOrBuilder extends
                // @@protoc_insertion_point(interface_extends:com.github.kornilova_l.flamegraph.proto.TreePreview.Vector)
                com.github.kornilova_l.libs.com.google.protobuf.MessageOrBuilder {

            /**
             * <code>uint64 x = 1;</code>
             */
            long getX();

            /**
             * <code>int32 y = 2;</code>
             */
            int getY();

            public com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector.VectorCase getVectorCase();
        }

        /**
         * Protobuf type {@code com.github.kornilova_l.flamegraph.proto.TreePreview.Vector}
         */
        public static final class Vector extends
                com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3 implements
                // @@protoc_insertion_point(message_implements:com.github.kornilova_l.flamegraph.proto.TreePreview.Vector)
                VectorOrBuilder {
            // Use Vector.newBuilder() to construct.
            private Vector(com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
                super(builder);
            }

            private Vector() {
            }

            @java.lang.Override
            public final com.github.kornilova_l.libs.com.google.protobuf.UnknownFieldSet
            getUnknownFields() {
                return com.github.kornilova_l.libs.com.google.protobuf.UnknownFieldSet.getDefaultInstance();
            }

            private Vector(
                    com.github.kornilova_l.libs.com.google.protobuf.CodedInputStream input,
                    com.github.kornilova_l.libs.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.github.kornilova_l.libs.com.google.protobuf.InvalidProtocolBufferException {
                this();
                int mutable_bitField0_ = 0;
                try {
                    boolean done = false;
                    while (!done) {
                        int tag = input.readTag();
                        switch (tag) {
                            case 0:
                                done = true;
                                break;
                            default: {
                                if (!input.skipField(tag)) {
                                    done = true;
                                }
                                break;
                            }
                            case 8: {
                                vectorCase_ = 1;
                                vector_ = input.readUInt64();
                                break;
                            }
                            case 16: {
                                vectorCase_ = 2;
                                vector_ = input.readInt32();
                                break;
                            }
                        }
                    }
                } catch (com.github.kornilova_l.libs.com.google.protobuf.InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (java.io.IOException e) {
                    throw new com.github.kornilova_l.libs.com.google.protobuf.InvalidProtocolBufferException(
                            e).setUnfinishedMessage(this);
                } finally {
                    makeExtensionsImmutable();
                }
            }

            public static final com.github.kornilova_l.libs.com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.internal_static_com_github_kornilova_l_flamegraph_proto_TreePreview_Vector_descriptor;
            }

            protected com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.internal_static_com_github_kornilova_l_flamegraph_proto_TreePreview_Vector_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector.class, com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector.Builder.class);
            }

            private int vectorCase_ = 0;
            private java.lang.Object vector_;

            public enum VectorCase
                    implements com.github.kornilova_l.libs.com.google.protobuf.Internal.EnumLite {
                X(1),
                Y(2),
                VECTOR_NOT_SET(0);
                private final int value;

                private VectorCase(int value) {
                    this.value = value;
                }

                /**
                 * @deprecated Use {@link #forNumber(int)} instead.
                 */
                @java.lang.Deprecated
                public static VectorCase valueOf(int value) {
                    return forNumber(value);
                }

                public static VectorCase forNumber(int value) {
                    switch (value) {
                        case 1:
                            return X;
                        case 2:
                            return Y;
                        case 0:
                            return VECTOR_NOT_SET;
                        default:
                            return null;
                    }
                }

                public int getNumber() {
                    return this.value;
                }
            }

            ;

            public VectorCase
            getVectorCase() {
                return VectorCase.forNumber(
                        vectorCase_);
            }

            public static final int X_FIELD_NUMBER = 1;

            /**
             * <code>uint64 x = 1;</code>
             */
            public long getX() {
                if (vectorCase_ == 1) {
                    return (java.lang.Long) vector_;
                }
                return 0L;
            }

            public static final int Y_FIELD_NUMBER = 2;

            /**
             * <code>int32 y = 2;</code>
             */
            public int getY() {
                if (vectorCase_ == 2) {
                    return (java.lang.Integer) vector_;
                }
                return 0;
            }

            private byte memoizedIsInitialized = -1;

            public final boolean isInitialized() {
                byte isInitialized = memoizedIsInitialized;
                if (isInitialized == 1) return true;
                if (isInitialized == 0) return false;

                memoizedIsInitialized = 1;
                return true;
            }

            public void writeTo(com.github.kornilova_l.libs.com.google.protobuf.CodedOutputStream output)
                    throws java.io.IOException {
                if (vectorCase_ == 1) {
                    output.writeUInt64(
                            1, (long) ((java.lang.Long) vector_));
                }
                if (vectorCase_ == 2) {
                    output.writeInt32(
                            2, (int) ((java.lang.Integer) vector_));
                }
            }

            public int getSerializedSize() {
                int size = memoizedSize;
                if (size != -1) return size;

                size = 0;
                if (vectorCase_ == 1) {
                    size += com.github.kornilova_l.libs.com.google.protobuf.CodedOutputStream
                            .computeUInt64Size(
                                    1, (long) ((java.lang.Long) vector_));
                }
                if (vectorCase_ == 2) {
                    size += com.github.kornilova_l.libs.com.google.protobuf.CodedOutputStream
                            .computeInt32Size(
                                    2, (int) ((java.lang.Integer) vector_));
                }
                memoizedSize = size;
                return size;
            }

            private static final long serialVersionUID = 0L;

            @java.lang.Override
            public boolean equals(final java.lang.Object obj) {
                if (obj == this) {
                    return true;
                }
                if (!(obj instanceof com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector)) {
                    return super.equals(obj);
                }
                com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector other = (com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector) obj;

                boolean result = true;
                result = result && getVectorCase().equals(
                        other.getVectorCase());
                if (!result) return false;
                switch (vectorCase_) {
                    case 1:
                        result = result && (getX()
                                == other.getX());
                        break;
                    case 2:
                        result = result && (getY()
                                == other.getY());
                        break;
                    case 0:
                    default:
                }
                return result;
            }

            @java.lang.Override
            public int hashCode() {
                if (memoizedHashCode != 0) {
                    return memoizedHashCode;
                }
                int hash = 41;
                hash = (19 * hash) + getDescriptor().hashCode();
                switch (vectorCase_) {
                    case 1:
                        hash = (37 * hash) + X_FIELD_NUMBER;
                        hash = (53 * hash) + com.github.kornilova_l.libs.com.google.protobuf.Internal.hashLong(
                                getX());
                        break;
                    case 2:
                        hash = (37 * hash) + Y_FIELD_NUMBER;
                        hash = (53 * hash) + getY();
                        break;
                    case 0:
                    default:
                }
                hash = (29 * hash) + unknownFields.hashCode();
                memoizedHashCode = hash;
                return hash;
            }

            public static com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector parseFrom(
                    java.nio.ByteBuffer data)
                    throws com.github.kornilova_l.libs.com.google.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data);
            }

            public static com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector parseFrom(
                    java.nio.ByteBuffer data,
                    com.github.kornilova_l.libs.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.github.kornilova_l.libs.com.google.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data, extensionRegistry);
            }

            public static com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector parseFrom(
                    com.github.kornilova_l.libs.com.google.protobuf.ByteString data)
                    throws com.github.kornilova_l.libs.com.google.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data);
            }

            public static com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector parseFrom(
                    com.github.kornilova_l.libs.com.google.protobuf.ByteString data,
                    com.github.kornilova_l.libs.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.github.kornilova_l.libs.com.google.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data, extensionRegistry);
            }

            public static com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector parseFrom(byte[] data)
                    throws com.github.kornilova_l.libs.com.google.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data);
            }

            public static com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector parseFrom(
                    byte[] data,
                    com.github.kornilova_l.libs.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.github.kornilova_l.libs.com.google.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data, extensionRegistry);
            }

            public static com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector parseFrom(java.io.InputStream input)
                    throws java.io.IOException {
                return com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3
                        .parseWithIOException(PARSER, input);
            }

            public static com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector parseFrom(
                    java.io.InputStream input,
                    com.github.kornilova_l.libs.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3
                        .parseWithIOException(PARSER, input, extensionRegistry);
            }

            public static com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector parseDelimitedFrom(java.io.InputStream input)
                    throws java.io.IOException {
                return com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3
                        .parseDelimitedWithIOException(PARSER, input);
            }

            public static com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector parseDelimitedFrom(
                    java.io.InputStream input,
                    com.github.kornilova_l.libs.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3
                        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
            }

            public static com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector parseFrom(
                    com.github.kornilova_l.libs.com.google.protobuf.CodedInputStream input)
                    throws java.io.IOException {
                return com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3
                        .parseWithIOException(PARSER, input);
            }

            public static com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector parseFrom(
                    com.github.kornilova_l.libs.com.google.protobuf.CodedInputStream input,
                    com.github.kornilova_l.libs.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3
                        .parseWithIOException(PARSER, input, extensionRegistry);
            }

            public Builder newBuilderForType() {
                return newBuilder();
            }

            public static Builder newBuilder() {
                return DEFAULT_INSTANCE.toBuilder();
            }

            public static Builder newBuilder(com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector prototype) {
                return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
            }

            public Builder toBuilder() {
                return this == DEFAULT_INSTANCE
                        ? new Builder() : new Builder().mergeFrom(this);
            }

            @java.lang.Override
            protected Builder newBuilderForType(
                    com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                Builder builder = new Builder(parent);
                return builder;
            }

            /**
             * Protobuf type {@code com.github.kornilova_l.flamegraph.proto.TreePreview.Vector}
             */
            public static final class Builder extends
                    com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                    // @@protoc_insertion_point(builder_implements:com.github.kornilova_l.flamegraph.proto.TreePreview.Vector)
                    com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.VectorOrBuilder {
                public static final com.github.kornilova_l.libs.com.google.protobuf.Descriptors.Descriptor
                getDescriptor() {
                    return com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.internal_static_com_github_kornilova_l_flamegraph_proto_TreePreview_Vector_descriptor;
                }

                protected com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
                internalGetFieldAccessorTable() {
                    return com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.internal_static_com_github_kornilova_l_flamegraph_proto_TreePreview_Vector_fieldAccessorTable
                            .ensureFieldAccessorsInitialized(
                                    com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector.class, com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector.Builder.class);
                }

                // Construct using com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector.newBuilder()
                private Builder() {
                    maybeForceBuilderInitialization();
                }

                private Builder(
                        com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                    super(parent);
                    maybeForceBuilderInitialization();
                }

                private void maybeForceBuilderInitialization() {
                    if (com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3
                            .alwaysUseFieldBuilders) {
                    }
                }

                public Builder clear() {
                    super.clear();
                    vectorCase_ = 0;
                    vector_ = null;
                    return this;
                }

                public com.github.kornilova_l.libs.com.google.protobuf.Descriptors.Descriptor
                getDescriptorForType() {
                    return com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.internal_static_com_github_kornilova_l_flamegraph_proto_TreePreview_Vector_descriptor;
                }

                public com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector getDefaultInstanceForType() {
                    return com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector.getDefaultInstance();
                }

                public com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector build() {
                    com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector result = buildPartial();
                    if (!result.isInitialized()) {
                        throw newUninitializedMessageException(result);
                    }
                    return result;
                }

                public com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector buildPartial() {
                    com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector result = new com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector(this);
                    if (vectorCase_ == 1) {
                        result.vector_ = vector_;
                    }
                    if (vectorCase_ == 2) {
                        result.vector_ = vector_;
                    }
                    result.vectorCase_ = vectorCase_;
                    onBuilt();
                    return result;
                }

                public Builder clone() {
                    return (Builder) super.clone();
                }

                public Builder setField(
                        com.github.kornilova_l.libs.com.google.protobuf.Descriptors.FieldDescriptor field,
                        Object value) {
                    return (Builder) super.setField(field, value);
                }

                public Builder clearField(
                        com.github.kornilova_l.libs.com.google.protobuf.Descriptors.FieldDescriptor field) {
                    return (Builder) super.clearField(field);
                }

                public Builder clearOneof(
                        com.github.kornilova_l.libs.com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                    return (Builder) super.clearOneof(oneof);
                }

                public Builder setRepeatedField(
                        com.github.kornilova_l.libs.com.google.protobuf.Descriptors.FieldDescriptor field,
                        int index, Object value) {
                    return (Builder) super.setRepeatedField(field, index, value);
                }

                public Builder addRepeatedField(
                        com.github.kornilova_l.libs.com.google.protobuf.Descriptors.FieldDescriptor field,
                        Object value) {
                    return (Builder) super.addRepeatedField(field, value);
                }

                public Builder mergeFrom(com.github.kornilova_l.libs.com.google.protobuf.Message other) {
                    if (other instanceof com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector) {
                        return mergeFrom((com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector) other);
                    } else {
                        super.mergeFrom(other);
                        return this;
                    }
                }

                public Builder mergeFrom(com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector other) {
                    if (other == com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector.getDefaultInstance())
                        return this;
                    switch (other.getVectorCase()) {
                        case X: {
                            setX(other.getX());
                            break;
                        }
                        case Y: {
                            setY(other.getY());
                            break;
                        }
                        case VECTOR_NOT_SET: {
                            break;
                        }
                    }
                    onChanged();
                    return this;
                }

                public final boolean isInitialized() {
                    return true;
                }

                public Builder mergeFrom(
                        com.github.kornilova_l.libs.com.google.protobuf.CodedInputStream input,
                        com.github.kornilova_l.libs.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                        throws java.io.IOException {
                    com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector parsedMessage = null;
                    try {
                        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                    } catch (com.github.kornilova_l.libs.com.google.protobuf.InvalidProtocolBufferException e) {
                        parsedMessage = (com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector) e.getUnfinishedMessage();
                        throw e.unwrapIOException();
                    } finally {
                        if (parsedMessage != null) {
                            mergeFrom(parsedMessage);
                        }
                    }
                    return this;
                }

                private int vectorCase_ = 0;
                private java.lang.Object vector_;

                public VectorCase
                getVectorCase() {
                    return VectorCase.forNumber(
                            vectorCase_);
                }

                public Builder clearVector() {
                    vectorCase_ = 0;
                    vector_ = null;
                    onChanged();
                    return this;
                }


                /**
                 * <code>uint64 x = 1;</code>
                 */
                public long getX() {
                    if (vectorCase_ == 1) {
                        return (java.lang.Long) vector_;
                    }
                    return 0L;
                }

                /**
                 * <code>uint64 x = 1;</code>
                 */
                public Builder setX(long value) {
                    vectorCase_ = 1;
                    vector_ = value;
                    onChanged();
                    return this;
                }

                /**
                 * <code>uint64 x = 1;</code>
                 */
                public Builder clearX() {
                    if (vectorCase_ == 1) {
                        vectorCase_ = 0;
                        vector_ = null;
                        onChanged();
                    }
                    return this;
                }

                /**
                 * <code>int32 y = 2;</code>
                 */
                public int getY() {
                    if (vectorCase_ == 2) {
                        return (java.lang.Integer) vector_;
                    }
                    return 0;
                }

                /**
                 * <code>int32 y = 2;</code>
                 */
                public Builder setY(int value) {
                    vectorCase_ = 2;
                    vector_ = value;
                    onChanged();
                    return this;
                }

                /**
                 * <code>int32 y = 2;</code>
                 */
                public Builder clearY() {
                    if (vectorCase_ == 2) {
                        vectorCase_ = 0;
                        vector_ = null;
                        onChanged();
                    }
                    return this;
                }

                public final Builder setUnknownFields(
                        final com.github.kornilova_l.libs.com.google.protobuf.UnknownFieldSet unknownFields) {
                    return this;
                }

                public final Builder mergeUnknownFields(
                        final com.github.kornilova_l.libs.com.google.protobuf.UnknownFieldSet unknownFields) {
                    return this;
                }


                // @@protoc_insertion_point(builder_scope:com.github.kornilova_l.flamegraph.proto.TreePreview.Vector)
            }

            // @@protoc_insertion_point(class_scope:com.github.kornilova_l.flamegraph.proto.TreePreview.Vector)
            private static final com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector DEFAULT_INSTANCE;

            static {
                DEFAULT_INSTANCE = new com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector();
            }

            public static com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            private static final com.github.kornilova_l.libs.com.google.protobuf.Parser<Vector>
                    PARSER = new com.github.kornilova_l.libs.com.google.protobuf.AbstractParser<Vector>() {
                public Vector parsePartialFrom(
                        com.github.kornilova_l.libs.com.google.protobuf.CodedInputStream input,
                        com.github.kornilova_l.libs.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                        throws com.github.kornilova_l.libs.com.google.protobuf.InvalidProtocolBufferException {
                    return new Vector(input, extensionRegistry);
                }
            };

            public static com.github.kornilova_l.libs.com.google.protobuf.Parser<Vector> parser() {
                return PARSER;
            }

            @java.lang.Override
            public com.github.kornilova_l.libs.com.google.protobuf.Parser<Vector> getParserForType() {
                return PARSER;
            }

            public com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector getDefaultInstanceForType() {
                return DEFAULT_INSTANCE;
            }

        }

        private int bitField0_;
        public static final int TREE_INFO_FIELD_NUMBER = 1;
        private com.github.kornilova_l.flamegraph.proto.TreeProtos.Tree.TreeInfo treeInfo_;

        /**
         * <code>.com.github.kornilova_l.flamegraph.proto.Tree.TreeInfo tree_info = 1;</code>
         */
        public boolean hasTreeInfo() {
            return treeInfo_ != null;
        }

        /**
         * <code>.com.github.kornilova_l.flamegraph.proto.Tree.TreeInfo tree_info = 1;</code>
         */
        public com.github.kornilova_l.flamegraph.proto.TreeProtos.Tree.TreeInfo getTreeInfo() {
            return treeInfo_ == null ? com.github.kornilova_l.flamegraph.proto.TreeProtos.Tree.TreeInfo.getDefaultInstance() : treeInfo_;
        }

        /**
         * <code>.com.github.kornilova_l.flamegraph.proto.Tree.TreeInfo tree_info = 1;</code>
         */
        public com.github.kornilova_l.flamegraph.proto.TreeProtos.Tree.TreeInfoOrBuilder getTreeInfoOrBuilder() {
            return getTreeInfo();
        }

        public static final int DEPTH_FIELD_NUMBER = 2;
        private int depth_;

        /**
         * <code>uint32 depth = 2;</code>
         */
        public int getDepth() {
            return depth_;
        }

        public static final int WIDTH_FIELD_NUMBER = 3;
        private long width_;

        /**
         * <code>int64 width = 3;</code>
         */
        public long getWidth() {
            return width_;
        }

        public static final int VECTORS_FIELD_NUMBER = 4;
        private java.util.List<com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector> vectors_;

        /**
         * <code>repeated .com.github.kornilova_l.flamegraph.proto.TreePreview.Vector vectors = 4;</code>
         */
        public java.util.List<com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector> getVectorsList() {
            return vectors_;
    }

        /**
         * <code>repeated .com.github.kornilova_l.flamegraph.proto.TreePreview.Vector vectors = 4;</code>
         */
        public java.util.List<? extends com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.VectorOrBuilder>
        getVectorsOrBuilderList() {
            return vectors_;
        }

        /**
         * <code>repeated .com.github.kornilova_l.flamegraph.proto.TreePreview.Vector vectors = 4;</code>
         */
        public int getVectorsCount() {
            return vectors_.size();
        }

        /**
         * <code>repeated .com.github.kornilova_l.flamegraph.proto.TreePreview.Vector vectors = 4;</code>
         */
        public com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector getVectors(int index) {
            return vectors_.get(index);
        }

        /**
         * <code>repeated .com.github.kornilova_l.flamegraph.proto.TreePreview.Vector vectors = 4;</code>
         */
        public com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.VectorOrBuilder getVectorsOrBuilder(
                int index) {
            return vectors_.get(index);
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.github.kornilova_l.libs.com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (treeInfo_ != null) {
                output.writeMessage(1, getTreeInfo());
            }
            if (depth_ != 0) {
                output.writeUInt32(2, depth_);
            }
            if (width_ != 0L) {
                output.writeInt64(3, width_);
            }
            for (int i = 0; i < vectors_.size(); i++) {
                output.writeMessage(4, vectors_.get(i));
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (treeInfo_ != null) {
                size += com.github.kornilova_l.libs.com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, getTreeInfo());
            }
            if (depth_ != 0) {
                size += com.github.kornilova_l.libs.com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(2, depth_);
            }
            if (width_ != 0L) {
                size += com.github.kornilova_l.libs.com.google.protobuf.CodedOutputStream
                        .computeInt64Size(3, width_);
            }
            for (int i = 0; i < vectors_.size(); i++) {
                size += com.github.kornilova_l.libs.com.google.protobuf.CodedOutputStream
                        .computeMessageSize(4, vectors_.get(i));
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview)) {
                return super.equals(obj);
            }
            com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview other = (com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview) obj;

            boolean result = true;
            result = result && (hasTreeInfo() == other.hasTreeInfo());
            if (hasTreeInfo()) {
                result = result && getTreeInfo()
                        .equals(other.getTreeInfo());
            }
            result = result && (getDepth()
                    == other.getDepth());
            result = result && (getWidth()
                    == other.getWidth());
            result = result && getVectorsList()
                    .equals(other.getVectorsList());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (hasTreeInfo()) {
                hash = (37 * hash) + TREE_INFO_FIELD_NUMBER;
                hash = (53 * hash) + getTreeInfo().hashCode();
            }
            hash = (37 * hash) + DEPTH_FIELD_NUMBER;
            hash = (53 * hash) + getDepth();
            hash = (37 * hash) + WIDTH_FIELD_NUMBER;
            hash = (53 * hash) + com.github.kornilova_l.libs.com.google.protobuf.Internal.hashLong(
                    getWidth());
            if (getVectorsCount() > 0) {
                hash = (37 * hash) + VECTORS_FIELD_NUMBER;
                hash = (53 * hash) + getVectorsList().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview parseFrom(
                java.nio.ByteBuffer data)
                throws com.github.kornilova_l.libs.com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview parseFrom(
                java.nio.ByteBuffer data,
                com.github.kornilova_l.libs.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.github.kornilova_l.libs.com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview parseFrom(
                com.github.kornilova_l.libs.com.google.protobuf.ByteString data)
                throws com.github.kornilova_l.libs.com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview parseFrom(
                com.github.kornilova_l.libs.com.google.protobuf.ByteString data,
                com.github.kornilova_l.libs.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.github.kornilova_l.libs.com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview parseFrom(byte[] data)
                throws com.github.kornilova_l.libs.com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview parseFrom(
                byte[] data,
                com.github.kornilova_l.libs.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.github.kornilova_l.libs.com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview parseFrom(
                java.io.InputStream input,
                com.github.kornilova_l.libs.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview parseDelimitedFrom(
                java.io.InputStream input,
                com.github.kornilova_l.libs.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview parseFrom(
                com.github.kornilova_l.libs.com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview parseFrom(
                com.github.kornilova_l.libs.com.google.protobuf.CodedInputStream input,
                com.github.kornilova_l.libs.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code com.github.kornilova_l.flamegraph.proto.TreePreview}
         */
        public static final class Builder extends
                com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:com.github.kornilova_l.flamegraph.proto.TreePreview)
                com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreviewOrBuilder {
            public static final com.github.kornilova_l.libs.com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.internal_static_com_github_kornilova_l_flamegraph_proto_TreePreview_descriptor;
            }

            protected com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.internal_static_com_github_kornilova_l_flamegraph_proto_TreePreview_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.class, com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Builder.class);
            }

            // Construct using com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                    getVectorsFieldBuilder();
                }
            }

            public Builder clear() {
                super.clear();
                if (treeInfoBuilder_ == null) {
                    treeInfo_ = null;
                } else {
                    treeInfo_ = null;
                    treeInfoBuilder_ = null;
                }
                depth_ = 0;

                width_ = 0L;

                if (vectorsBuilder_ == null) {
                    vectors_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000008);
                } else {
                    vectorsBuilder_.clear();
                }
                return this;
            }

            public com.github.kornilova_l.libs.com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.internal_static_com_github_kornilova_l_flamegraph_proto_TreePreview_descriptor;
            }

            public com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview getDefaultInstanceForType() {
                return com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.getDefaultInstance();
            }

            public com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview build() {
                com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview buildPartial() {
                com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview result = new com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (treeInfoBuilder_ == null) {
                    result.treeInfo_ = treeInfo_;
                } else {
                    result.treeInfo_ = treeInfoBuilder_.build();
                }
                result.depth_ = depth_;
                result.width_ = width_;
                if (vectorsBuilder_ == null) {
                    if (((bitField0_ & 0x00000008) == 0x00000008)) {
                        vectors_ = java.util.Collections.unmodifiableList(vectors_);
                        bitField0_ = (bitField0_ & ~0x00000008);
                    }
                    result.vectors_ = vectors_;
                } else {
                    result.vectors_ = vectorsBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.github.kornilova_l.libs.com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.github.kornilova_l.libs.com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.github.kornilova_l.libs.com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.github.kornilova_l.libs.com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.github.kornilova_l.libs.com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.github.kornilova_l.libs.com.google.protobuf.Message other) {
                if (other instanceof com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview) {
                    return mergeFrom((com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview other) {
                if (other == com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.getDefaultInstance())
                    return this;
                if (other.hasTreeInfo()) {
                    mergeTreeInfo(other.getTreeInfo());
                }
                if (other.getDepth() != 0) {
                    setDepth(other.getDepth());
                }
                if (other.getWidth() != 0L) {
                    setWidth(other.getWidth());
                }
                if (vectorsBuilder_ == null) {
                    if (!other.vectors_.isEmpty()) {
                        if (vectors_.isEmpty()) {
                            vectors_ = other.vectors_;
                            bitField0_ = (bitField0_ & ~0x00000008);
                        } else {
                            ensureVectorsIsMutable();
                            vectors_.addAll(other.vectors_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.vectors_.isEmpty()) {
                        if (vectorsBuilder_.isEmpty()) {
                            vectorsBuilder_.dispose();
                            vectorsBuilder_ = null;
                            vectors_ = other.vectors_;
                            bitField0_ = (bitField0_ & ~0x00000008);
                            vectorsBuilder_ =
                                    com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getVectorsFieldBuilder() : null;
                        } else {
                            vectorsBuilder_.addAllMessages(other.vectors_);
                        }
                    }
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.github.kornilova_l.libs.com.google.protobuf.CodedInputStream input,
                    com.github.kornilova_l.libs.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.github.kornilova_l.libs.com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private com.github.kornilova_l.flamegraph.proto.TreeProtos.Tree.TreeInfo treeInfo_ = null;
            private com.github.kornilova_l.libs.com.google.protobuf.SingleFieldBuilderV3<
                    com.github.kornilova_l.flamegraph.proto.TreeProtos.Tree.TreeInfo, com.github.kornilova_l.flamegraph.proto.TreeProtos.Tree.TreeInfo.Builder, com.github.kornilova_l.flamegraph.proto.TreeProtos.Tree.TreeInfoOrBuilder> treeInfoBuilder_;

            /**
             * <code>.com.github.kornilova_l.flamegraph.proto.Tree.TreeInfo tree_info = 1;</code>
             */
            public boolean hasTreeInfo() {
                return treeInfoBuilder_ != null || treeInfo_ != null;
            }

            /**
             * <code>.com.github.kornilova_l.flamegraph.proto.Tree.TreeInfo tree_info = 1;</code>
             */
            public com.github.kornilova_l.flamegraph.proto.TreeProtos.Tree.TreeInfo getTreeInfo() {
                if (treeInfoBuilder_ == null) {
                    return treeInfo_ == null ? com.github.kornilova_l.flamegraph.proto.TreeProtos.Tree.TreeInfo.getDefaultInstance() : treeInfo_;
                } else {
                    return treeInfoBuilder_.getMessage();
                }
            }

            /**
             * <code>.com.github.kornilova_l.flamegraph.proto.Tree.TreeInfo tree_info = 1;</code>
             */
            public Builder setTreeInfo(com.github.kornilova_l.flamegraph.proto.TreeProtos.Tree.TreeInfo value) {
                if (treeInfoBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    treeInfo_ = value;
                    onChanged();
                } else {
                    treeInfoBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <code>.com.github.kornilova_l.flamegraph.proto.Tree.TreeInfo tree_info = 1;</code>
             */
            public Builder setTreeInfo(
                    com.github.kornilova_l.flamegraph.proto.TreeProtos.Tree.TreeInfo.Builder builderForValue) {
                if (treeInfoBuilder_ == null) {
                    treeInfo_ = builderForValue.build();
                    onChanged();
                } else {
                    treeInfoBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <code>.com.github.kornilova_l.flamegraph.proto.Tree.TreeInfo tree_info = 1;</code>
             */
            public Builder mergeTreeInfo(com.github.kornilova_l.flamegraph.proto.TreeProtos.Tree.TreeInfo value) {
                if (treeInfoBuilder_ == null) {
                    if (treeInfo_ != null) {
                        treeInfo_ =
                                com.github.kornilova_l.flamegraph.proto.TreeProtos.Tree.TreeInfo.newBuilder(treeInfo_).mergeFrom(value).buildPartial();
                    } else {
                        treeInfo_ = value;
                    }
                    onChanged();
                } else {
                    treeInfoBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <code>.com.github.kornilova_l.flamegraph.proto.Tree.TreeInfo tree_info = 1;</code>
             */
            public Builder clearTreeInfo() {
                if (treeInfoBuilder_ == null) {
                    treeInfo_ = null;
                    onChanged();
                } else {
                    treeInfo_ = null;
                    treeInfoBuilder_ = null;
                }

                return this;
            }

            /**
             * <code>.com.github.kornilova_l.flamegraph.proto.Tree.TreeInfo tree_info = 1;</code>
             */
            public com.github.kornilova_l.flamegraph.proto.TreeProtos.Tree.TreeInfo.Builder getTreeInfoBuilder() {

                onChanged();
                return getTreeInfoFieldBuilder().getBuilder();
            }

            /**
             * <code>.com.github.kornilova_l.flamegraph.proto.Tree.TreeInfo tree_info = 1;</code>
             */
            public com.github.kornilova_l.flamegraph.proto.TreeProtos.Tree.TreeInfoOrBuilder getTreeInfoOrBuilder() {
                if (treeInfoBuilder_ != null) {
                    return treeInfoBuilder_.getMessageOrBuilder();
                } else {
                    return treeInfo_ == null ?
                            com.github.kornilova_l.flamegraph.proto.TreeProtos.Tree.TreeInfo.getDefaultInstance() : treeInfo_;
                }
            }

            /**
             * <code>.com.github.kornilova_l.flamegraph.proto.Tree.TreeInfo tree_info = 1;</code>
             */
            private com.github.kornilova_l.libs.com.google.protobuf.SingleFieldBuilderV3<
                    com.github.kornilova_l.flamegraph.proto.TreeProtos.Tree.TreeInfo, com.github.kornilova_l.flamegraph.proto.TreeProtos.Tree.TreeInfo.Builder, com.github.kornilova_l.flamegraph.proto.TreeProtos.Tree.TreeInfoOrBuilder>
            getTreeInfoFieldBuilder() {
                if (treeInfoBuilder_ == null) {
                    treeInfoBuilder_ = new com.github.kornilova_l.libs.com.google.protobuf.SingleFieldBuilderV3<
                            com.github.kornilova_l.flamegraph.proto.TreeProtos.Tree.TreeInfo, com.github.kornilova_l.flamegraph.proto.TreeProtos.Tree.TreeInfo.Builder, com.github.kornilova_l.flamegraph.proto.TreeProtos.Tree.TreeInfoOrBuilder>(
                            getTreeInfo(),
                            getParentForChildren(),
                            isClean());
                    treeInfo_ = null;
                }
                return treeInfoBuilder_;
            }

            private int depth_;

            /**
             * <code>uint32 depth = 2;</code>
             */
            public int getDepth() {
                return depth_;
            }

            /**
             * <code>uint32 depth = 2;</code>
             */
            public Builder setDepth(int value) {

                depth_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>uint32 depth = 2;</code>
             */
            public Builder clearDepth() {

                depth_ = 0;
                onChanged();
                return this;
            }

            private long width_;

            /**
             * <code>int64 width = 3;</code>
             */
            public long getWidth() {
                return width_;
            }

            /**
             * <code>int64 width = 3;</code>
             */
            public Builder setWidth(long value) {

                width_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>int64 width = 3;</code>
             */
            public Builder clearWidth() {

                width_ = 0L;
                onChanged();
                return this;
            }

            private java.util.List<com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector> vectors_ =
                    java.util.Collections.emptyList();

            private void ensureVectorsIsMutable() {
                if (!((bitField0_ & 0x00000008) == 0x00000008)) {
                    vectors_ = new java.util.ArrayList<com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector>(vectors_);
                    bitField0_ |= 0x00000008;
                }
            }

            private com.github.kornilova_l.libs.com.google.protobuf.RepeatedFieldBuilderV3<
                    com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector, com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector.Builder, com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.VectorOrBuilder> vectorsBuilder_;

            /**
             * <code>repeated .com.github.kornilova_l.flamegraph.proto.TreePreview.Vector vectors = 4;</code>
             */
            public java.util.List<com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector> getVectorsList() {
                if (vectorsBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(vectors_);
                } else {
                    return vectorsBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .com.github.kornilova_l.flamegraph.proto.TreePreview.Vector vectors = 4;</code>
             */
            public int getVectorsCount() {
                if (vectorsBuilder_ == null) {
                    return vectors_.size();
                } else {
                    return vectorsBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .com.github.kornilova_l.flamegraph.proto.TreePreview.Vector vectors = 4;</code>
             */
            public com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector getVectors(int index) {
                if (vectorsBuilder_ == null) {
                    return vectors_.get(index);
                } else {
                    return vectorsBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .com.github.kornilova_l.flamegraph.proto.TreePreview.Vector vectors = 4;</code>
             */
            public Builder setVectors(
                    int index, com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector value) {
                if (vectorsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureVectorsIsMutable();
                    vectors_.set(index, value);
                    onChanged();
                } else {
                    vectorsBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .com.github.kornilova_l.flamegraph.proto.TreePreview.Vector vectors = 4;</code>
             */
            public Builder setVectors(
                    int index, com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector.Builder builderForValue) {
                if (vectorsBuilder_ == null) {
                    ensureVectorsIsMutable();
                    vectors_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    vectorsBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .com.github.kornilova_l.flamegraph.proto.TreePreview.Vector vectors = 4;</code>
             */
            public Builder addVectors(com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector value) {
                if (vectorsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureVectorsIsMutable();
                    vectors_.add(value);
                    onChanged();
                } else {
                    vectorsBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .com.github.kornilova_l.flamegraph.proto.TreePreview.Vector vectors = 4;</code>
             */
            public Builder addVectors(
                    int index, com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector value) {
                if (vectorsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureVectorsIsMutable();
                    vectors_.add(index, value);
                    onChanged();
                } else {
                    vectorsBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .com.github.kornilova_l.flamegraph.proto.TreePreview.Vector vectors = 4;</code>
             */
            public Builder addVectors(
                    com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector.Builder builderForValue) {
                if (vectorsBuilder_ == null) {
                    ensureVectorsIsMutable();
                    vectors_.add(builderForValue.build());
                    onChanged();
                } else {
                    vectorsBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .com.github.kornilova_l.flamegraph.proto.TreePreview.Vector vectors = 4;</code>
             */
            public Builder addVectors(
                    int index, com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector.Builder builderForValue) {
                if (vectorsBuilder_ == null) {
                    ensureVectorsIsMutable();
                    vectors_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    vectorsBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .com.github.kornilova_l.flamegraph.proto.TreePreview.Vector vectors = 4;</code>
             */
            public Builder addAllVectors(
                    java.lang.Iterable<? extends com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector> values) {
                if (vectorsBuilder_ == null) {
                    ensureVectorsIsMutable();
                    com.github.kornilova_l.libs.com.google.protobuf.AbstractMessageLite.Builder.addAll(
                            values, vectors_);
                    onChanged();
                } else {
                    vectorsBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .com.github.kornilova_l.flamegraph.proto.TreePreview.Vector vectors = 4;</code>
             */
            public Builder clearVectors() {
                if (vectorsBuilder_ == null) {
                    vectors_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000008);
                    onChanged();
                } else {
                    vectorsBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .com.github.kornilova_l.flamegraph.proto.TreePreview.Vector vectors = 4;</code>
             */
            public Builder removeVectors(int index) {
                if (vectorsBuilder_ == null) {
                    ensureVectorsIsMutable();
                    vectors_.remove(index);
                    onChanged();
                } else {
                    vectorsBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .com.github.kornilova_l.flamegraph.proto.TreePreview.Vector vectors = 4;</code>
             */
            public com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector.Builder getVectorsBuilder(
                    int index) {
                return getVectorsFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .com.github.kornilova_l.flamegraph.proto.TreePreview.Vector vectors = 4;</code>
             */
            public com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.VectorOrBuilder getVectorsOrBuilder(
                    int index) {
                if (vectorsBuilder_ == null) {
                    return vectors_.get(index);
                } else {
                    return vectorsBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .com.github.kornilova_l.flamegraph.proto.TreePreview.Vector vectors = 4;</code>
             */
            public java.util.List<? extends com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.VectorOrBuilder>
            getVectorsOrBuilderList() {
                if (vectorsBuilder_ != null) {
                    return vectorsBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(vectors_);
                }
            }

            /**
             * <code>repeated .com.github.kornilova_l.flamegraph.proto.TreePreview.Vector vectors = 4;</code>
             */
            public com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector.Builder addVectorsBuilder() {
                return getVectorsFieldBuilder().addBuilder(
                        com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector.getDefaultInstance());
            }

            /**
             * <code>repeated .com.github.kornilova_l.flamegraph.proto.TreePreview.Vector vectors = 4;</code>
             */
            public com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector.Builder addVectorsBuilder(
                    int index) {
                return getVectorsFieldBuilder().addBuilder(
                        index, com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector.getDefaultInstance());
            }

            /**
             * <code>repeated .com.github.kornilova_l.flamegraph.proto.TreePreview.Vector vectors = 4;</code>
             */
            public java.util.List<com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector.Builder>
            getVectorsBuilderList() {
                return getVectorsFieldBuilder().getBuilderList();
            }

            private com.github.kornilova_l.libs.com.google.protobuf.RepeatedFieldBuilderV3<
                    com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector, com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector.Builder, com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.VectorOrBuilder>
            getVectorsFieldBuilder() {
                if (vectorsBuilder_ == null) {
                    vectorsBuilder_ = new com.github.kornilova_l.libs.com.google.protobuf.RepeatedFieldBuilderV3<
                            com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector, com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.Vector.Builder, com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview.VectorOrBuilder>(
                            vectors_,
                            ((bitField0_ & 0x00000008) == 0x00000008),
                            getParentForChildren(),
                            isClean());
                    vectors_ = null;
                }
                return vectorsBuilder_;
            }

            public final Builder setUnknownFields(
                    final com.github.kornilova_l.libs.com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.github.kornilova_l.libs.com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:com.github.kornilova_l.flamegraph.proto.TreePreview)
        }

        // @@protoc_insertion_point(class_scope:com.github.kornilova_l.flamegraph.proto.TreePreview)
        private static final com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview();
        }

        public static com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.github.kornilova_l.libs.com.google.protobuf.Parser<TreePreview>
                PARSER = new com.github.kornilova_l.libs.com.google.protobuf.AbstractParser<TreePreview>() {
            public TreePreview parsePartialFrom(
                    com.github.kornilova_l.libs.com.google.protobuf.CodedInputStream input,
                    com.github.kornilova_l.libs.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.github.kornilova_l.libs.com.google.protobuf.InvalidProtocolBufferException {
                return new TreePreview(input, extensionRegistry);
      }
    };

    public static com.github.kornilova_l.libs.com.google.protobuf.Parser<TreePreview> parser() {
        return PARSER;
    }

        @java.lang.Override
        public com.github.kornilova_l.libs.com.google.protobuf.Parser<TreePreview> getParserForType() {
            return PARSER;
        }

        public com.github.kornilova_l.flamegraph.proto.TreePreviewProtos.TreePreview getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

    }

    private static final com.github.kornilova_l.libs.com.google.protobuf.Descriptors.Descriptor
            internal_static_com_github_kornilova_l_flamegraph_proto_TreePreview_descriptor;
    private static final
    com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_com_github_kornilova_l_flamegraph_proto_TreePreview_fieldAccessorTable;
    private static final com.github.kornilova_l.libs.com.google.protobuf.Descriptors.Descriptor
            internal_static_com_github_kornilova_l_flamegraph_proto_TreePreview_Vector_descriptor;
    private static final
    com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_com_github_kornilova_l_flamegraph_proto_TreePreview_Vector_fieldAccessorTable;

    public static com.github.kornilova_l.libs.com.google.protobuf.Descriptors.FileDescriptor
    getDescriptor() {
        return descriptor;
    }

    private static com.github.kornilova_l.libs.com.google.protobuf.Descriptors.FileDescriptor
            descriptor;

    static {
        java.lang.String[] descriptorData = {
                "\n:com/github/kornilova_l/flamegraph/prot" +
                        "o/tree_preview.proto\022\'com.github.kornilo" +
                        "va_l.flamegraph.proto\0322com/github/kornil" +
                        "ova_l/flamegraph/proto/tree.proto\"\362\001\n\013Tr" +
                        "eePreview\022I\n\ttree_info\030\001 \001(\01326.com.githu" +
                        "b.kornilova_l.flamegraph.proto.Tree.Tree" +
                        "Info\022\r\n\005depth\030\002 \001(\r\022\r\n\005width\030\003 \001(\003\022L\n\007ve" +
                        "ctors\030\004 \003(\0132;.com.github.kornilova_l.fla" +
                        "megraph.proto.TreePreview.Vector\032,\n\006Vect" +
                        "or\022\013\n\001x\030\001 \001(\004H\000\022\013\n\001y\030\002 \001(\005H\000B\010\n\006vectorB\023",
                "B\021TreePreviewProtosb\006proto3"
        };
        com.github.kornilova_l.libs.com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
                new com.github.kornilova_l.libs.com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
                    public com.github.kornilova_l.libs.com.google.protobuf.ExtensionRegistry assignDescriptors(
                            com.github.kornilova_l.libs.com.google.protobuf.Descriptors.FileDescriptor root) {
                        descriptor = root;
                        return null;
                    }
                };
        com.github.kornilova_l.libs.com.google.protobuf.Descriptors.FileDescriptor
                .internalBuildGeneratedFileFrom(descriptorData,
                        new com.github.kornilova_l.libs.com.google.protobuf.Descriptors.FileDescriptor[]{
                                com.github.kornilova_l.flamegraph.proto.TreeProtos.getDescriptor(),
                        }, assigner);
        internal_static_com_github_kornilova_l_flamegraph_proto_TreePreview_descriptor =
                getDescriptor().getMessageTypes().get(0);
        internal_static_com_github_kornilova_l_flamegraph_proto_TreePreview_fieldAccessorTable = new
                com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_com_github_kornilova_l_flamegraph_proto_TreePreview_descriptor,
                new java.lang.String[]{"TreeInfo", "Depth", "Width", "Vectors", });
    internal_static_com_github_kornilova_l_flamegraph_proto_TreePreview_Vector_descriptor =
      internal_static_com_github_kornilova_l_flamegraph_proto_TreePreview_descriptor.getNestedTypes().get(0);
    internal_static_com_github_kornilova_l_flamegraph_proto_TreePreview_Vector_fieldAccessorTable = new
      com.github.kornilova_l.libs.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_github_kornilova_l_flamegraph_proto_TreePreview_Vector_descriptor,
        new java.lang.String[] { "X", "Y", "Vector", });
    com.github.kornilova_l.flamegraph.proto.TreeProtos.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
